{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/Development/Test-Projects/graphql-react/frontend/src/components/AllUsers.js\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ALL_USERS } from \"../Queries/gqlQueries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AllUsers = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ALL_USERS, {\n    fetchPolicy: \"network-only\",\n    pollInterval: 500\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 21\n  }, this);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"th\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: \"ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: \"Designation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this); //   data.getAllUsers.map(({ name, id }) => (\n  //     <div key={id}>\n  //       <p>\n  //         {id}: {name}\n  //       </p>\n  //     </div>\n  //   ));\n};\n\n_s(AllUsers, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = AllUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllUsers\");","map":{"version":3,"sources":["/home/dev/Desktop/Development/Test-Projects/graphql-react/frontend/src/components/AllUsers.js"],"names":["useQuery","GET_ALL_USERS","AllUsers","loading","error","data","fetchPolicy","pollInterval","console","log"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACC,aAAD,EAAgB;AACvDK,IAAAA,WAAW,EAAE,cAD0C;AAEvDC,IAAAA,YAAY,EAAE;AAFyC,GAAhB,CAAzC;AAIA,MAAIJ,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACXI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,sBACE;AAAA,2BACE;AAAA,6BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAT4B,CAqB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA5BM;;GAAMH,Q;UACsBF,Q;;;KADtBE,Q","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport { GET_ALL_USERS } from \"../Queries/gqlQueries\";\n\nexport const AllUsers = () => {\n  const { loading, error, data } = useQuery(GET_ALL_USERS, {\n    fetchPolicy: \"network-only\",\n    pollInterval: 500,\n  });\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n\n  return (\n    <table>\n      <th>\n        <tr>\n          <tr>ID</tr>\n          <tr>Name</tr>\n          <tr>Email</tr>\n          <tr>Designation</tr>\n        </tr>\n      </th>\n    </table>\n  );\n  //   data.getAllUsers.map(({ name, id }) => (\n  //     <div key={id}>\n  //       <p>\n  //         {id}: {name}\n  //       </p>\n  //     </div>\n  //   ));\n};\n"]},"metadata":{},"sourceType":"module"}